
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 03 22:48:11 CEST 2020
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoCore;
import alex.UnidadLexica;
import errors.GestionErroresCore;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 03 22:48:11 CEST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\005\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\003" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\030\005\031\006\032\007\001\002\000" +
    "\004\002\074\001\002\000\004\033\073\001\002\000\004" +
    "\033\072\001\002\000\004\033\071\001\002\000\006\014" +
    "\uffff\015\uffff\001\002\000\006\014\013\015\012\001\002" +
    "\000\004\033\017\001\002\000\010\030\005\031\006\032" +
    "\007\001\002\000\006\014\ufffe\015\ufffe\001\002\000\006" +
    "\002\001\014\067\001\002\000\006\002\ufffa\014\ufffa\001" +
    "\002\000\004\025\020\001\002\000\022\004\036\020\035" +
    "\022\021\026\025\027\023\033\024\034\022\035\030\001" +
    "\002\000\016\004\036\026\025\027\023\033\024\034\022" +
    "\035\030\001\002\000\040\002\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002\000" +
    "\040\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\001\002\000\040\002\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\001\002\000\040\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\001\002\000\040\002" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\017\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\001\002\000\040\002\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\016" +
    "\uffef\017\uffef\021\uffef\022\uffef\023\064\024\063\001\002" +
    "\000\040\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\001\002\000\034\002\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\001\002\000" +
    "\034\002\ufff3\005\ufff3\006\052\007\051\010\055\011\056" +
    "\012\054\013\057\014\ufff3\016\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\001\002\000\020\002\ufff5\005\ufff5\014\ufff5\016\043" +
    "\017\046\021\042\022\045\001\002\000\006\002\ufff8\014" +
    "\ufff8\001\002\000\022\004\036\020\035\022\021\026\025" +
    "\027\023\033\024\034\022\035\030\001\002\000\022\004" +
    "\036\020\035\022\021\026\025\027\023\033\024\034\022" +
    "\035\030\001\002\000\004\005\040\001\002\000\040\002" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\001\002\000\040\002\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\016" +
    "\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\001\002" +
    "\000\022\004\036\020\035\022\021\026\025\027\023\033" +
    "\024\034\022\035\030\001\002\000\022\004\uffe5\020\uffe5" +
    "\022\uffe5\026\uffe5\027\uffe5\033\uffe5\034\uffe5\035\uffe5\001" +
    "\002\000\022\004\036\020\035\022\021\026\025\027\023" +
    "\033\024\034\022\035\030\001\002\000\022\004\036\020" +
    "\035\022\021\026\025\027\023\033\024\034\022\035\030" +
    "\001\002\000\022\004\uffe4\020\uffe4\022\uffe4\026\uffe4\027" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\014\002\ufff6" +
    "\005\ufff6\014\ufff6\016\043\017\046\001\002\000\034\002" +
    "\ufff4\005\ufff4\006\052\007\051\010\055\011\056\012\054" +
    "\013\057\014\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\001" +
    "\002\000\022\004\uffdf\020\uffdf\022\uffdf\026\uffdf\027\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\001\002\000\022\004\uffe3\020" +
    "\uffe3\022\uffe3\026\uffe3\027\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\001\002\000\022\004\036\020\035\022\021\026\025\027" +
    "\023\033\024\034\022\035\030\001\002\000\022\004\uffe1" +
    "\020\uffe1\022\uffe1\026\uffe1\027\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\001\002\000\022\004\uffde\020\uffde\022\uffde\026\uffde" +
    "\027\uffde\033\uffde\034\uffde\035\uffde\001\002\000\022\004" +
    "\uffe0\020\uffe0\022\uffe0\026\uffe0\027\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\001\002\000\022\004\uffe2\020\uffe2\022\uffe2\026" +
    "\uffe2\027\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\034" +
    "\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2" +
    "\001\002\000\010\002\ufff7\005\ufff7\014\ufff7\001\002\000" +
    "\022\004\036\020\035\022\021\026\025\027\023\033\024" +
    "\034\022\035\030\001\002\000\022\004\uffdc\020\uffdc\022" +
    "\uffdc\026\uffdc\027\uffdc\033\uffdc\034\uffdc\035\uffdc\001\002" +
    "\000\022\004\uffdd\020\uffdd\022\uffdd\026\uffdd\027\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\001\002\000\034\002\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\001\002\000\040" +
    "\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\017\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\001\002\000\004\033\017\001\002\000" +
    "\006\002\ufff9\014\ufff9\001\002\000\006\014\ufffd\015\ufffd" +
    "\001\002\000\006\014\ufffb\015\ufffb\001\002\000\006\014" +
    "\ufffc\015\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\002\003\003\010\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\014\006\015\001\001\000\004\004\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\033\010\032\011\031\012\030\013\026" +
    "\014\025\001\001\000\004\014\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\052\001\001\000\004" +
    "\015\043\001\001\000\002\001\001\000\006\013\040\014" +
    "\025\001\001\000\016\007\036\010\032\011\031\012\030" +
    "\013\026\014\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\060\010\032\011\031" +
    "\012\030\013\026\014\025\001\001\000\002\001\001\000" +
    "\012\011\047\012\030\013\026\014\025\001\001\000\014" +
    "\010\046\011\031\012\030\013\026\014\025\001\001\000" +
    "\002\001\001\000\004\015\043\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\057\013\026\014\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\064\014\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresCore();
   AnalizadorLexicoCore alex = (AnalizadorLexicoCore)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresCore errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    private ASCore as = new ASCore();
   
    private E opBin(Object op, E e1, E e2){
        switch(op.toString()) {
            case "*":
                return as.mul(e1, e2);
            case "/":
                return as.div(e1, e2);
            case "and":
                return as.and(e1, e2);
            case "or":
                return as.or(e1, e2);
            case "==":
                return as.eq(e1, e2);
            case "!=":
                return as.ne(e1, e2);
            case "<":
                return as.lt(e1, e2);
            case "<=":
                return as.le(e1, e2);
            case ">":
                return as.gt(e1, e2);
            case ">=":
                return as.ge(e1, e2);
            case "+":
                return as.suma(e1, e2);
            default:
                return as.resta(e1, e2);
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= DECS SEPARADOR INSTS 
            {
              Prog RESULT =null;
		Location aDeDECSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeDECSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LDs aDeDECS = (LDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeINSTSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeINSTSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		LIs aDeINSTS = (LIs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.programa(aDeDECS, aDeINSTS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECS ::= DEC 
            {
              LDs RESULT =null;
		Location aDeDECxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeDECxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Dec aDeDEC = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.dSimple(aDeDEC); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECS ::= DECS PCOMA DEC 
            {
              LDs RESULT =null;
		Location aDeDECSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeDECSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LDs aDeDECS = (LDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeDECxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeDECxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Dec aDeDEC = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.dCompuesta(aDeDECS, aDeDEC); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEC ::= TENT IDEN 
            {
              Dec RESULT =null;
		Location lexDeIDENxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeIDENxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeIDEN = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.decInt(lexDeIDEN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEC ::= TREAL IDEN 
            {
              Dec RESULT =null;
		Location lexDeIDENxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeIDENxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeIDEN = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.decReal(lexDeIDEN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= TBOOL IDEN 
            {
              Dec RESULT =null;
		Location lexDeIDENxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeIDENxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeIDEN = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.decBool(lexDeIDEN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTS ::= INST 
            {
              LIs RESULT =null;
		Location aDeINSTxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeINSTxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Inst aDeINST = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.lSimple(aDeINST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTS ::= INSTS PCOMA INST 
            {
              LIs RESULT =null;
		Location aDeINSTSxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeINSTSxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		LIs aDeINSTS = (LIs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeINSTxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeINSTxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Inst aDeINST = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.lCompuesta(aDeINSTS, aDeINST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= IDEN ASIG EXPR0 
            {
              Inst RESULT =null;
		Location lexDeIDENxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lexDeIDENxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String lexDeIDEN = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeEXPR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR0 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.asig(lexDeIDEN, aDeEXPR0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPR0 ::= EXPR1 MAS EXPR0 
            {
              E RESULT =null;
		Location aDeEXPR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeEXPR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		E aDeEXPR1 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeEXPR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR0 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opBin("+", aDeEXPR1, aDeEXPR0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR0 ::= EXPR1 MENOS EXPR1 
            {
              E RESULT =null;
		Location aDeEXPR10xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeEXPR10xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		E aDeEXPR10 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location aDeEXPR11xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR11xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR11 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opBin("-", aDeEXPR10, aDeEXPR11); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR0 ::= EXPR1 
            {
              E RESULT =null;
		Location aDeEXPR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR1 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aDeEXPR1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR1 ::= EXPR1 OP1 EXPR2 
            {
              E RESULT =null;
		Location aDeEXPR1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeEXPR1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		E aDeEXPR1 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opDeOP1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opDeOP1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object opDeOP1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location aDeEXPR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR2 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opBin(opDeOP1, aDeEXPR1, aDeEXPR2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPR1 ::= EXPR2 
            {
              E RESULT =null;
		Location aDeEXPR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR2 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aDeEXPR2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPR2 ::= EXPR2 OP2 EXPR3 
            {
              E RESULT =null;
		Location aDeEXPR2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeEXPR2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		E aDeEXPR2 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opDeOP2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opDeOP2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object opDeOP2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location aDeEXPR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR3 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  opBin(opDeOP2, aDeEXPR2, aDeEXPR3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPR2 ::= EXPR3 
            {
              E RESULT =null;
		Location aDeEXPR3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR3 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aDeEXPR3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPR3 ::= EXPR4 OP3 EXPR4 
            {
              E RESULT =null;
		Location aDeEXPR40xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location aDeEXPR40xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		E aDeEXPR40 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location opDeOP3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location opDeOP3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object opDeOP3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location aDeEXPR41xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR41xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR41 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = opBin(opDeOP3, aDeEXPR40, aDeEXPR41); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPR3 ::= EXPR4 
            {
              E RESULT =null;
		Location aDeEXPR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR4 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aDeEXPR4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPR4 ::= MENOS EXPR5 
            {
              E RESULT =null;
		Location aDeEXPR5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR5 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.negacion(aDeEXPR5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR4 ::= NOT EXPR4 
            {
              E RESULT =null;
		Location aDeEXPR4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR4 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.not(aDeEXPR4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR4 ::= EXPR5 
            {
              E RESULT =null;
		Location aDeEXPR5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location aDeEXPR5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		E aDeEXPR5 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aDeEXPR5; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPR5 ::= PAPER EXPR0 PCIE 
            {
              E RESULT =null;
		Location aDeEXPR0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location aDeEXPR0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		E aDeEXPR0 = (E)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = aDeEXPR0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPR5 ::= IDEN 
            {
              E RESULT =null;
		Location lexDeIDENxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeIDENxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeIDEN = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.var(lexDeIDEN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPR5 ::= TRUE 
            {
              E RESULT =null;
		 RESULT = as.trueFalse("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR5 ::= FALSE 
            {
              E RESULT =null;
		 RESULT = as.trueFalse("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPR5 ::= ENT 
            {
              E RESULT =null;
		Location lexDeENTxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeENTxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeENT = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.entero(lexDeENT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPR5 ::= REAL 
            {
              E RESULT =null;
		Location lexDeREALxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lexDeREALxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String lexDeREAL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.real(lexDeREAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP1 ::= AND 
            {
              Object RESULT =null;
		 RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP1 ::= OR 
            {
              Object RESULT =null;
		 RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP2 ::= EQ 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP2 ::= NE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= GT 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= GE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP2 ::= LT 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP2 ::= LE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP3 ::= POR 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP3 ::= DIV 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

